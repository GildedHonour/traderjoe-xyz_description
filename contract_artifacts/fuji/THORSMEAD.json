{
  "address": "0xE9E29CB769786360D9FD55743478BC8fA0b87542",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_unswapV2Rt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chWallAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minTokensBeforeSwap",
          "type": "uint256"
        }
      ],
      "name": "MinTokensBeforeSwapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSwapped",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethReceived",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensIntoLiqudity",
          "type": "uint256"
        }
      ],
      "name": "SwapAndLiquify",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SwapAndLiquifyEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_charityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_liquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_maxTxAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_taxFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        }
      ],
      "name": "deliver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "excludeFromReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "includeInReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isExcludedFromReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deductTransferFee",
          "type": "bool"
        }
      ],
      "name": "reflectionFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "charityFee",
          "type": "uint256"
        }
      ],
      "name": "setCharityFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "liquidityFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTxPercent",
          "type": "uint256"
        }
      ],
      "name": "setMaxTxPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "setSwapAndLiquifyEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taxFee",
          "type": "uint256"
        }
      ],
      "name": "setTaxFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapAndLiquifyEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenFromReflection",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf568ebdb68f218894cdb58f2cd36fcebdeb86250e7123093ceb02d92bfa81ae0",
  "receipt": {
    "to": null,
    "from": "0x8935737fE9f2ba410d48a625575858CB9b5Bf279",
    "contractAddress": "0xE9E29CB769786360D9FD55743478BC8fA0b87542",
    "transactionIndex": 0,
    "gasUsed": "4885445",
    "logsBloom": "0x
    "blockHash": "0xd2ff4c0e6c1c3d9d7ffa102f053e217b731382af2e68238fc03e97f92ee6c44c",
    "transactionHash": "0xf568ebdb68f218894cdb58f2cd36fcebdeb86250e7123093ceb02d92bfa81ae0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6069028,
        "transactionHash": "0xf568ebdb68f218894cdb58f2cd36fcebdeb86250e7123093ceb02d92bfa81ae0",
        "address": "0xE9E29CB769786360D9FD55743478BC8fA0b87542",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008935737fe9f2ba410d48a625575858cb9b5bf279"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd2ff4c0e6c1c3d9d7ffa102f053e217b731382af2e68238fc03e97f92ee6c44c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6069028,
        "transactionHash": "0xf568ebdb68f218894cdb58f2cd36fcebdeb86250e7123093ceb02d92bfa81ae0",
        "address": "0xbefd514461625C604C03094e3A6E6F1bCB499315",
        "topics": [
          "0x0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9",
          "0x000000000000000000000000d00ae08403b9bbb9124bb305c09058e32c39a48c",
          "0x000000000000000000000000e9e29cb769786360d9fd55743478bc8fa0b87542"
        ],
        "data": "0x0000000000000000000000000e65184bbc7e47de8d8c5fe3d1adc070b5b7574a0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 1,
        "blockHash": "0xd2ff4c0e6c1c3d9d7ffa102f053e217b731382af2e68238fc03e97f92ee6c44c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 6069028,
        "transactionHash": "0xf568ebdb68f218894cdb58f2cd36fcebdeb86250e7123093ceb02d92bfa81ae0",
        "address": "0xE9E29CB769786360D9FD55743478BC8fA0b87542",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008935737fe9f2ba410d48a625575858cb9b5bf279"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016345785d8a0000",
        "logIndex": 2,
        "blockHash": "0xd2ff4c0e6c1c3d9d7ffa102f053e217b731382af2e68238fc03e97f92ee6c44c"
      }
    ],
    "blockNumber": 6069028,
    "cumulativeGasUsed": "4885445",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD8D37bA976D29D55c70Bc4f025Da14BD3013CDda",
    "0x8935737fe9f2ba410d48a625575858cb9b5bf279"
  ],
  "solcInputHash": "ca828ee38bf7e9ce0bd04ee84034431b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_unswapV2Rt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chWallAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"MinTokensBeforeSwapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_charityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deductTransferFee\",\"type\":\"bool\"}],\"name\":\"reflectionFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"charityFee\",\"type\":\"uint256\"}],\"name\":\"setCharityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taxFee\",\"type\":\"uint256\"}],\"name\":\"setTaxFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAmount\",\"type\":\"uint256\"}],\"name\":\"tokenFromReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/THORSMEAD.sol\":\"THORSMEAD\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/THORSMEAD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n// import \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n// import \\\"./interfaces/IERC20.sol\\\";\\n// import \\\"./libraries/SafeMath.sol\\\";\\n\\ninterface IUniswapV2Factory { \\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function migrator() external view returns (address);\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n    function allPairs(uint256) external view returns (address pair);\\n    function allPairsLength() external view returns (uint256);\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n    function setMigrator(address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WAVAX() external pure returns (address);\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n   function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ncontract THORSMEAD is Context, IERC20, Ownable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    mapping (address => uint256) private _rOwned;\\n    mapping (address => uint256) private _tOwned;\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n    mapping (address => bool) private _isExcludedFromFee;\\n    mapping (address => bool) private _isExcluded;\\n    address[] private _excluded;\\n\\n    // bnb address of the charity wallet\\n    // address private _charityWalletAddress = 0x8935737fe9f2ba410d48a625575858cb9b5bf279; // my address on Avalanche > Fuji\\n    address private _charityWalletAddress;\\n\\n    uint256 private constant MAX = ~uint256(0);\\n    uint256 private _tTotal = 1000000000 * 10**8; //Total supply\\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\\n    uint256 private _tFeeTotal;\\n    string private _name = \\\"THORS MEAD\\\";\\n    string private _symbol = \\\"MEAD\\\";\\n    uint8 private _decimals = 8;\\n    \\n    uint256 public _taxFee = 2;\\n    uint256 private _previousTaxFee = _taxFee;\\n    \\n    uint256 public _charityFee = 5;\\n    uint256 private _previousCharityFee = _charityFee;\\n    uint256 public _liquidityFee = 2;\\n    uint256 private _previousLiquidityFee = _liquidityFee;\\n    IUniswapV2Router02 public immutable uniswapV2Router;\\n    address public immutable uniswapV2Pair;\\n    \\n    bool inSwapAndLiquify;\\n    bool public swapAndLiquifyEnabled = true;\\n    \\n    uint256 public _maxTxAmount = 1000000000 * 10**8; //Max tx amount\\n    uint256 private numTokensSellToAddToLiquidity = 500000 * 10**8; //Fee threshold for LP acquisition\\n    \\n    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);\\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\\n    event SwapAndLiquify(\\n        uint256 tokensSwapped,\\n        uint256 ethReceived,\\n        uint256 tokensIntoLiqudity\\n    );\\n    \\n    modifier lockTheSwap {\\n        inSwapAndLiquify = true;\\n        _;\\n        inSwapAndLiquify = false;\\n    }\\n    \\n    constructor(\\n        address _unswapV2Rt,\\n        address _chWallAddr\\n    ) public {\\n        _rOwned[owner()] = _rTotal;\\n\\n        _charityWalletAddress = _chWallAddr; // my address on Avalanche > Fuji\\n\\n\\n        // address of JoeRouter02 which is identical to IJoeRouter02\\n        //PCS v2 Router address\\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x60aE616a2155Ee3d9A68541Ba4544862310933d4); //fixme \\n\\n        // IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD8D37bA976D29D55c70Bc4f025Da14BD3013CDda);\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(_unswapV2Rt);\\n        \\n\\n\\n\\n         // Create a uniswap pair for this new token\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WAVAX());\\n        // set the rest of the contract variables\\n        uniswapV2Router = _uniswapV2Router;\\n\\n        //exclude owner and this contract from fee\\n        _isExcludedFromFee[owner()] = true;\\n        _isExcludedFromFee[address(this)] = true;\\n\\n        emit Transfer(address(0), owner(), _tTotal);\\n    }\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n    function totalSupply() public view override returns (uint256) {\\n        return _tTotal;\\n    }\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_isExcluded[account]) return _tOwned[account];\\n        return tokenFromReflection(_rOwned[account]);\\n    }\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n    function isExcludedFromReward(address account) public view returns (bool) {\\n        return _isExcluded[account];\\n    }\\n    function totalFees() public view returns (uint256) {\\n        return _tFeeTotal;\\n    }\\n    function deliver(uint256 tAmount) public {\\n        address sender = _msgSender();\\n        require(!_isExcluded[sender], \\\"Excluded addresses cannot call this function\\\");\\n        (uint256 rAmount,,,,,,) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rTotal = _rTotal.sub(rAmount);\\n        _tFeeTotal = _tFeeTotal.add(tAmount);\\n    }\\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\\n        require(tAmount <= _tTotal, \\\"Amount must be less than supply\\\");\\n        if (!deductTransferFee) {\\n            (uint256 rAmount,,,,,,) = _getValues(tAmount);\\n            return rAmount;\\n        } else {\\n            (,uint256 rTransferAmount,,,,,) = _getValues(tAmount);\\n            return rTransferAmount;\\n        }\\n    }\\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\\n        require(rAmount <= _rTotal, \\\"Amount must be less than total reflections\\\");\\n        uint256 currentRate =  _getRate();\\n        return rAmount.div(currentRate);\\n    }\\n    function excludeFromReward(address account) public onlyOwner() {\\n        // require(account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 'We can not exclude Uniswap router.');\\n        require(!_isExcluded[account], \\\"Account is already excluded\\\");\\n        if(_rOwned[account] > 0) {\\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\\n        }\\n        _isExcluded[account] = true;\\n        _excluded.push(account);\\n    }\\n    function includeInReward(address account) external onlyOwner() {\\n        require(_isExcluded[account], \\\"Account is already included\\\");\\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_excluded[i] == account) {\\n                _excluded[i] = _excluded[_excluded.length - 1];\\n                _tOwned[account] = 0;\\n                _isExcluded[account] = false;\\n                _excluded.pop();\\n                break;\\n            }\\n        }\\n    }\\n        function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \\n        _takeLiquidity(tLiquidity);\\n        _takeCharity(tCharity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    \\n        function excludeFromFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = true;\\n    }\\n    \\n    function includeInFee(address account) public onlyOwner {\\n        _isExcludedFromFee[account] = false;\\n    }\\n    \\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {\\n        _taxFee = taxFee;\\n    }\\n    function setCharityFeePercent(uint256 charityFee) external onlyOwner() {\\n        _charityFee = charityFee;\\n    }\\n    \\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {\\n        _liquidityFee = liquidityFee;\\n    }\\n   \\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\\n        _maxTxAmount = _tTotal.mul(maxTxPercent).div(\\n            10**2\\n        );\\n    }\\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\\n        swapAndLiquifyEnabled = _enabled;\\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\\n    }\\n    \\n     //to recieve ETH from uniswapV2Router when swaping\\n    receive() external payable {}\\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\\n        _rTotal = _rTotal.sub(rFee);\\n        _tFeeTotal = _tFeeTotal.add(tFee);\\n    }\\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity) = _getTValues(tAmount);\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, tCharity, _getRate());\\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity, tCharity);\\n    }\\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\\n        uint256 tFee = calculateTaxFee(tAmount);\\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\\n        uint256 tCharity = calculateCharityFee(tAmount);\\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity).sub(tCharity);\\n        return (tTransferAmount, tFee, tLiquidity, tCharity);\\n    }\\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\\n        uint256 rAmount = tAmount.mul(currentRate);\\n        uint256 rFee = tFee.mul(currentRate);\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        uint256 rCharity = tCharity.mul(currentRate);\\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity).sub(rCharity);\\n        return (rAmount, rTransferAmount, rFee);\\n    }\\n    function _getRate() private view returns(uint256) {\\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\\n        return rSupply.div(tSupply);\\n    }\\n    function _getCurrentSupply() private view returns(uint256, uint256) {\\n        uint256 rSupply = _rTotal;\\n        uint256 tSupply = _tTotal;      \\n        for (uint256 i = 0; i < _excluded.length; i++) {\\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\\n        }\\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\\n        return (rSupply, tSupply);\\n    }\\n    \\n    function _takeLiquidity(uint256 tLiquidity) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\\n        if(_isExcluded[address(this)])\\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\\n    }\\n    \\n    function _takeCharity(uint256 tCharity) private {\\n        uint256 currentRate =  _getRate();\\n        uint256 rCharity = tCharity.mul(currentRate);\\n        _rOwned[_charityWalletAddress] = _rOwned[_charityWalletAddress].add(rCharity);\\n        if(_isExcluded[_charityWalletAddress])\\n            _tOwned[_charityWalletAddress] = _tOwned[_charityWalletAddress].add(tCharity);\\n    }\\n    \\n    function calculateTaxFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_taxFee).div(\\n            10**2\\n        );\\n    }\\n    function calculateCharityFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_charityFee).div(\\n            10**2\\n        );\\n    }\\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\\n        return _amount.mul(_liquidityFee).div(\\n            10**2\\n        );\\n    }\\n    \\n    function removeAllFee() private {\\n        if(_taxFee == 0 && _liquidityFee == 0) return;\\n        \\n        _previousTaxFee = _taxFee;\\n        _previousCharityFee = _charityFee;\\n        _previousLiquidityFee = _liquidityFee;\\n        \\n        _taxFee = 0;\\n        _charityFee = 0;\\n        _liquidityFee = 0;\\n    }\\n    \\n    function restoreAllFee() private {\\n        _taxFee = _previousTaxFee;\\n        _charityFee = _previousCharityFee;\\n        _liquidityFee = _previousLiquidityFee;\\n    }\\n    \\n    function isExcludedFromFee(address account) public view returns(bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n        if(from != owner() && to != owner())\\n            require(amount <= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\n        // is the token balance of this contract address over the min number of\\n        // tokens that we need to initiate a swap + liquidity lock?\\n        // also, don't get caught in a circular liquidity event.\\n        // also, don't swap & liquify if sender is uniswap pair.\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        \\n        if(contractTokenBalance >= _maxTxAmount)\\n        {\\n            contractTokenBalance = _maxTxAmount;\\n        }\\n        \\n        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\\n        if (\\n            overMinTokenBalance &&\\n            !inSwapAndLiquify &&\\n            from != uniswapV2Pair &&\\n            swapAndLiquifyEnabled\\n        ) {\\n            contractTokenBalance = numTokensSellToAddToLiquidity;\\n            //add liquidity\\n            swapAndLiquify(contractTokenBalance);\\n        }\\n        \\n        //indicates if fee should be deducted from transfer\\n        bool takeFee = true;\\n        \\n        //if any account belongs to _isExcludedFromFee account then remove the fee\\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\\n            takeFee = false;\\n        }\\n        \\n        //transfer amount, it will take tax, burn, liquidity fee\\n        _tokenTransfer(from,to,amount,takeFee);\\n    }\\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\\n        // split the contract balance into halves\\n        uint256 half = contractTokenBalance.div(2);\\n        uint256 otherHalf = contractTokenBalance.sub(half);\\n        // capture the contract's current ETH balance.\\n        // this is so that we can capture exactly the amount of ETH that the\\n        // swap creates, and not make the liquidity event include any ETH that\\n        // has been manually sent to the contract\\n        uint256 initialBalance = address(this).balance;\\n        // swap tokens for ETH\\n        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\\n        // how much ETH did we just swap into?\\n        uint256 newBalance = address(this).balance.sub(initialBalance);\\n        // add liquidity to uniswap\\n        addLiquidity(otherHalf, newBalance);\\n        \\n        emit SwapAndLiquify(half, newBalance, otherHalf);\\n    }\\n    function swapTokensForEth(uint256 tokenAmount) private {\\n        // generate the uniswap pair path of token -> weth\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WAVAX();\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        // make the swap\\n        uniswapV2Router.swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount of ETH\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\\n        // approve token transfer to cover all possible scenarios\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\n        // add the liquidity\\n        uniswapV2Router.addLiquidityAVAX{value: ethAmount}(\\n            address(this),\\n            tokenAmount,\\n            0, // slippage is unavoidable\\n            0, // slippage is unavoidable\\n            owner(),\\n            block.timestamp\\n        );\\n    }\\n    //this method is responsible for taking all fee, if takeFee is true\\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\\n        if(!takeFee)\\n            removeAllFee();\\n        \\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferFromExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferToExcluded(sender, recipient, amount);\\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\\n            _transferStandard(sender, recipient, amount);\\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\\n            _transferBothExcluded(sender, recipient, amount);\\n        } else {\\n            _transferStandard(sender, recipient, amount);\\n        }\\n        \\n        if(!takeFee)\\n            restoreAllFee();\\n    }\\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\\n        _takeLiquidity(tLiquidity);\\n        _takeCharity(tCharity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity) = _getValues(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \\n        _takeLiquidity(tLiquidity);\\n        _takeCharity(tCharity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity, uint256 tCharity) = _getValues(tAmount);\\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \\n        _takeLiquidity(tLiquidity);\\n        _takeCharity(tCharity);\\n        _reflectFee(rFee, tFee);\\n        emit Transfer(sender, recipient, tTransferAmount);\\n    }\\n}\",\"keccak256\":\"0xf6ffe25fb85a789f4ac6cca1011dc4486340a52bdffca925d823b3a616386343\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x67016345785d8a000060085567012a74c07c69ffff19600955610100604052600a60c081905269151213d494c81351505160b21b60e09081526200004791600b9190620003dc565b50604080518082019091526004808252631351505160e21b60209092019182526200007591600c91620003dc565b50600d805460ff191660081790556002600e819055600f8190556005601081905560115560128190556013556014805461ff00191661010017905567016345785d8a0000601555652d79883d2000601655348015620000d357600080fd5b5060405162002f6338038062002f6383398181016040526040811015620000f957600080fd5b50805160209091015160006200010e620003c9565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506009546001600062000169620003cd565b6001600160a01b039081168252602080830193909352604091820160002093909355600780546001600160a01b031916858516179055805163c45a015560e01b81529051859384169263c45a01559260048082019391829003018186803b158015620001d457600080fd5b505afa158015620001e9573d6000803e3d6000fd5b505050506040513d60208110156200020057600080fd5b5051604080516339d94ae160e11b815290516001600160a01b039283169263c9c65396923092918616916373b295c291600480820192602092909190829003018186803b1580156200025157600080fd5b505afa15801562000266573d6000803e3d6000fd5b505050506040513d60208110156200027d57600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301525160448083019260209291908290030181600087803b158015620002d057600080fd5b505af1158015620002e5573d6000803e3d6000fd5b505050506040513d6020811015620002fc57600080fd5b50516001600160601b0319606091821b811660a0529082901b1660805260016004600062000329620003cd565b6001600160a01b0316815260208082019290925260409081016000908120805494151560ff19958616179055308152600490925290208054909116600117905562000373620003cd565b6001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6008546040518082815260200191505060405180910390a350505062000488565b3390565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200041457600085556200045f565b82601f106200042f57805160ff19168380011785556200045f565b828001600101855582156200045f579182015b828111156200045f57825182559160200191906001019062000442565b506200046d92915062000471565b5090565b5b808211156200046d576000815560010162000472565b60805160601c60a05160601c612a93620004d060003980610ec252806118f752508061098b52806120c05280612178528061219f528061228552806122ac5250612a936000f3fe6080604052600436106102135760003560e01c806352390c021161011857806395d89b41116100a0578063c49b9a801161006f578063c49b9a8014610771578063d543dbeb1461079d578063dd62ed3e146107c7578063ea2f0b3714610802578063f2fde38b146108355761021a565b806395d89b41146106c0578063a457c2d7146106d5578063a9059cbb1461070e578063af41063b146107475761021a565b8063715018a6116100e7578063715018a6146106245780637d1db4a51461063957806388f820201461064e5780638da5cb5b146106815780638ee88c53146106965761021a565b806352390c02146105765780635342acb4146105a95780636bc87c3a146105dc57806370a08231146105f15761021a565b80633685d4191161019b57806340f8007a1161016a57806340f8007a146104d2578063437823ec146104e75780634549b0391461051a57806349bd5a5e1461054c5780634a74bb02146105615761021a565b80633685d41914610427578063395093511461045a5780633b124fe7146104935780633bd5d173146104a85761021a565b80631694505e116101e25780631694505e1461034957806318160ddd1461037a57806323b872dd1461038f5780632d838119146103d2578063313ce567146103fc5761021a565b8063061c82d01461021f57806306fdde031461024b578063095ea7b3146102d557806313114a9d146103225761021a565b3661021a57005b600080fd5b34801561022b57600080fd5b506102496004803603602081101561024257600080fd5b5035610868565b005b34801561025757600080fd5b506102606108cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029a578181015183820152602001610282565b50505050905090810190601f1680156102c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e157600080fd5b5061030e600480360360408110156102f857600080fd5b506001600160a01b038135169060200135610965565b604080519115158252519081900360200190f35b34801561032e57600080fd5b50610337610983565b60408051918252519081900360200190f35b34801561035557600080fd5b5061035e610989565b604080516001600160a01b039092168252519081900360200190f35b34801561038657600080fd5b506103376109ad565b34801561039b57600080fd5b5061030e600480360360608110156103b257600080fd5b506001600160a01b038135811691602081013590911690604001356109b3565b3480156103de57600080fd5b50610337600480360360208110156103f557600080fd5b5035610a3a565b34801561040857600080fd5b50610411610a9c565b6040805160ff9092168252519081900360200190f35b34801561043357600080fd5b506102496004803603602081101561044a57600080fd5b50356001600160a01b0316610aa5565b34801561046657600080fd5b5061030e6004803603604081101561047d57600080fd5b506001600160a01b038135169060200135610c70565b34801561049f57600080fd5b50610337610cbe565b3480156104b457600080fd5b50610249600480360360208110156104cb57600080fd5b5035610cc4565b3480156104de57600080fd5b50610337610da0565b3480156104f357600080fd5b506102496004803603602081101561050a57600080fd5b50356001600160a01b0316610da6565b34801561052657600080fd5b506103376004803603604081101561053d57600080fd5b50803590602001351515610e2c565b34801561055857600080fd5b5061035e610ec0565b34801561056d57600080fd5b5061030e610ee4565b34801561058257600080fd5b506102496004803603602081101561059957600080fd5b50356001600160a01b0316610ef2565b3480156105b557600080fd5b5061030e600480360360208110156105cc57600080fd5b50356001600160a01b0316611082565b3480156105e857600080fd5b506103376110a0565b3480156105fd57600080fd5b506103376004803603602081101561061457600080fd5b50356001600160a01b03166110a6565b34801561063057600080fd5b50610249611108565b34801561064557600080fd5b506103376111b4565b34801561065a57600080fd5b5061030e6004803603602081101561067157600080fd5b50356001600160a01b03166111ba565b34801561068d57600080fd5b5061035e6111d8565b3480156106a257600080fd5b50610249600480360360208110156106b957600080fd5b50356111e7565b3480156106cc57600080fd5b5061026061124e565b3480156106e157600080fd5b5061030e600480360360408110156106f857600080fd5b506001600160a01b0381351690602001356112af565b34801561071a57600080fd5b5061030e6004803603604081101561073157600080fd5b506001600160a01b038135169060200135611317565b34801561075357600080fd5b506102496004803603602081101561076a57600080fd5b503561132b565b34801561077d57600080fd5b506102496004803603602081101561079457600080fd5b50351515611392565b3480156107a957600080fd5b50610249600480360360208110156107c057600080fd5b5035611443565b3480156107d357600080fd5b50610337600480360360408110156107ea57600080fd5b506001600160a01b03813581169160200135166114cb565b34801561080e57600080fd5b506102496004803603602081101561082557600080fd5b50356001600160a01b03166114f6565b34801561084157600080fd5b506102496004803603602081101561085857600080fd5b50356001600160a01b0316611579565b61087061167b565b6001600160a01b03166108816111d8565b6001600160a01b0316146108ca576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b600e55565b600b8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b5050505050905090565b600061097961097261167b565b848461167f565b5060015b92915050565b600a5490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60085490565b60006109c084848461176b565b610a30846109cc61167b565b610a2b85604051806060016040528060288152602001612953602891396001600160a01b038a16600090815260036020526040812090610a0a61167b565b6001600160a01b0316815260208101919091526040016000205491906119b1565b61167f565b5060019392505050565b6000600954821115610a7d5760405162461bcd60e51b815260040180806020018281038252602a815260200180612898602a913960400191505060405180910390fd5b6000610a87611a48565b9050610a938382611a6b565b9150505b919050565b600d5460ff1690565b610aad61167b565b6001600160a01b0316610abe6111d8565b6001600160a01b031614610b07576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526005602052604090205460ff16610b74576040805162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920696e636c756465640000000000604482015290519081900360640190fd5b60005b600654811015610c6c57816001600160a01b031660068281548110610b9857fe5b6000918252602090912001546001600160a01b03161415610c6457600680546000198101908110610bc557fe5b600091825260209091200154600680546001600160a01b039092169183908110610beb57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152600282526040808220829055600590925220805460ff191690556006805480610c3d57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610c6c565b600101610b77565b5050565b6000610979610c7d61167b565b84610a2b8560036000610c8e61167b565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611ad2565b600e5481565b6000610cce61167b565b6001600160a01b03811660009081526005602052604090205490915060ff1615610d295760405162461bcd60e51b815260040180806020018281038252602c815260200180612a0d602c913960400191505060405180910390fd5b6000610d3483611b33565b5050506001600160a01b038616600090815260016020526040902054939450610d6293925084915050611b8e565b6001600160a01b038316600090815260016020526040902055600954610d889082611b8e565b600955600a54610d989084611ad2565b600a55505050565b60105481565b610dae61167b565b6001600160a01b0316610dbf6111d8565b6001600160a01b031614610e08576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000600854831115610e85576040805162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c7900604482015290519081900360640190fd5b81610ea5576000610e9584611b33565b5094965061097d95505050505050565b6000610eb084611b33565b5093965061097d95505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b601454610100900460ff1681565b610efa61167b565b6001600160a01b0316610f0b6111d8565b6001600160a01b031614610f54576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526005602052604090205460ff1615610fc2576040805162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c756465640000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600160205260409020541561101c576001600160a01b03811660009081526001602052604090205461100290610a3a565b6001600160a01b0382166000908152600260205260409020555b6001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b6001600160a01b031660009081526004602052604090205460ff1690565b60125481565b6001600160a01b03811660009081526005602052604081205460ff16156110e657506001600160a01b038116600090815260026020526040902054610a97565b6001600160a01b03821660009081526001602052604090205461097d90610a3a565b61111061167b565b6001600160a01b03166111216111d8565b6001600160a01b03161461116a576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60155481565b6001600160a01b031660009081526005602052604090205460ff1690565b6000546001600160a01b031690565b6111ef61167b565b6001600160a01b03166112006111d8565b6001600160a01b031614611249576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b601255565b600c8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095b5780601f106109305761010080835404028352916020019161095b565b60006109796112bc61167b565b84610a2b85604051806060016040528060258152602001612a3960259139600360006112e661167b565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906119b1565b600061097961132461167b565b848461176b565b61133361167b565b6001600160a01b03166113446111d8565b6001600160a01b03161461138d576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b601055565b61139a61167b565b6001600160a01b03166113ab6111d8565b6001600160a01b0316146113f4576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b60148054821515610100810261ff00199092169190911790915560408051918252517f53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc1599181900360200190a150565b61144b61167b565b6001600160a01b031661145c6111d8565b6001600160a01b0316146114a5576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6114c560646114bf83600854611beb90919063ffffffff16565b90611a6b565b60155550565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6114fe61167b565b6001600160a01b031661150f6111d8565b6001600160a01b031614611558576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600460205260409020805460ff19169055565b61158161167b565b6001600160a01b03166115926111d8565b6001600160a01b0316146115db576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b0381166116205760405162461bcd60e51b81526004018080602001828103825260268152602001806128c26026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b0383166116c45760405162461bcd60e51b81526004018080602001828103825260248152602001806129e96024913960400191505060405180910390fd5b6001600160a01b0382166117095760405162461bcd60e51b81526004018080602001828103825260228152602001806128e86022913960400191505060405180910390fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166117b05760405162461bcd60e51b81526004018080602001828103825260258152602001806129c46025913960400191505060405180910390fd5b6001600160a01b0382166117f55760405162461bcd60e51b81526004018080602001828103825260238152602001806128756023913960400191505060405180910390fd5b600081116118345760405162461bcd60e51b815260040180806020018281038252602981526020018061299b6029913960400191505060405180910390fd5b61183c6111d8565b6001600160a01b0316836001600160a01b03161415801561187657506118606111d8565b6001600160a01b0316826001600160a01b031614155b156118bc576015548111156118bc5760405162461bcd60e51b815260040180806020018281038252602881526020018061290a6028913960400191505060405180910390fd5b60006118c7306110a6565b905060155481106118d757506015545b601654811080159081906118ee575060145460ff16155b801561192c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614155b801561193f5750601454610100900460ff165b1561195257601654915061195282611c44565b6001600160a01b03851660009081526004602052604090205460019060ff168061199457506001600160a01b03851660009081526004602052604090205460ff165b1561199d575060005b6119a986868684611ce1565b505050505050565b60008184841115611a405760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a055781810151838201526020016119ed565b50505050905090810190601f168015611a325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000806000611a55611e55565b9092509050611a648282611a6b565b9250505090565b6000808211611ac1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611aca57fe5b049392505050565b600082820183811015611b2c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000806000806000806000806000806000611b4d8c611fb8565b93509350935093506000806000611b6e8f878787611b69611a48565b61200d565b919f509d509b509599509397509195509350505050919395979092949650565b600082821115611be5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082611bfa5750600061097d565b82820282848281611c0757fe5b0414611b2c5760405162461bcd60e51b81526004018080602001828103825260218152602001806129326021913960400191505060405180910390fd5b6014805460ff191660011790556000611c5e826002611a6b565b90506000611c6c8383611b8e565b905047611c788361206f565b6000611c844783611b8e565b9050611c90838261227f565b604080518581526020810183905280820185905290517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a150506014805460ff19169055505050565b80611cee57611cee61237d565b6001600160a01b03841660009081526005602052604090205460ff168015611d2f57506001600160a01b03831660009081526005602052604090205460ff16155b15611d4457611d3f8484846123ba565b611e42565b6001600160a01b03841660009081526005602052604090205460ff16158015611d8557506001600160a01b03831660009081526005602052604090205460ff165b15611d9557611d3f8484846124fe565b6001600160a01b03841660009081526005602052604090205460ff16158015611dd757506001600160a01b03831660009081526005602052604090205460ff16155b15611de757611d3f8484846125bd565b6001600160a01b03841660009081526005602052604090205460ff168015611e2757506001600160a01b03831660009081526005602052604090205460ff165b15611e3757611d3f848484612617565b611e428484846125bd565b80611e4f57611e4f6126a0565b50505050565b6009546008546000918291825b600654811015611f8657826001600060068481548110611e7e57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020541180611ee35750816002600060068481548110611ebc57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b15611efa5760095460085494509450505050611fb4565b611f3a6001600060068481548110611f0e57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548490611b8e565b9250611f7c6002600060068481548110611f5057fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548390611b8e565b9150600101611e62565b50600854600954611f9691611a6b565b821015611fae57600954600854935093505050611fb4565b90925090505b9091565b6000806000806000611fc9866126b4565b90506000611fd6876126d0565b90506000611fe3886126ec565b90506000611ffd82611ff785818d89611b8e565b90611b8e565b9993985091965094509092505050565b600080808061201c8986611beb565b9050600061202a8987611beb565b905060006120388988611beb565b905060006120468989611beb565b9050600061205a82611ff785818989611b8e565b949d949c50929a509298505050505050505050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061209e57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561211757600080fd5b505afa15801561212b573d6000803e3d6000fd5b505050506040513d602081101561214157600080fd5b505181518290600190811061215257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061219d307f00000000000000000000000000000000000000000000000000000000000000008461167f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663762b15628360008430426040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561224257818101518382015260200161222a565b505050509050019650505050505050600060405180830381600087803b15801561226b57600080fd5b505af11580156119a9573d6000803e3d6000fd5b6122aa307f00000000000000000000000000000000000000000000000000000000000000008461167f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f91b3f728230856000806122e76111d8565b426040518863ffffffff1660e01b815260040180876001600160a01b03168152602001868152602001858152602001848152602001836001600160a01b0316815260200182815260200196505050505050506060604051808303818588803b15801561235257600080fd5b505af1158015612366573d6000803e3d6000fd5b50505050506040513d6060811015611e4f57600080fd5b600e5415801561238d5750601254155b15612397576123b8565b600e8054600f55601080546011556012805460135560009283905590829055555b565b60008060008060008060006123ce88611b33565b965096509650965096509650965061241488600260008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611b8e90919063ffffffff16565b6001600160a01b038b166000908152600260209081526040808320939093556001905220546124439088611b8e565b6001600160a01b03808c1660009081526001602052604080822093909355908b16815220546124729087611ad2565b6001600160a01b038a1660009081526001602052604090205561249482612708565b61249d81612791565b6124a78584612850565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a350505050505050505050565b600080600080600080600061251288611b33565b965096509650965096509650965061255887600160008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611b8e90919063ffffffff16565b6001600160a01b03808c16600090815260016020908152604080832094909455918c1681526002909152205461258e9085611ad2565b6001600160a01b038a166000908152600260209081526040808320939093556001905220546124729087611ad2565b60008060008060008060006125d188611b33565b965096509650965096509650965061244387600160008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611b8e90919063ffffffff16565b600080600080600080600061262b88611b33565b965096509650965096509650965061267188600260008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611b8e90919063ffffffff16565b6001600160a01b038b166000908152600260209081526040808320939093556001905220546125589088611b8e565b600f54600e55601154601055601354601255565b600061097d60646114bf600e5485611beb90919063ffffffff16565b600061097d60646114bf60125485611beb90919063ffffffff16565b600061097d60646114bf60105485611beb90919063ffffffff16565b6000612712611a48565b905060006127208383611beb565b3060009081526001602052604090205490915061273d9082611ad2565b3060009081526001602090815260408083209390935560059052205460ff161561278c573060009081526002602052604090205461277b9084611ad2565b306000908152600260205260409020555b505050565b600061279b611a48565b905060006127a98383611beb565b6007546001600160a01b03166000908152600160205260409020549091506127d19082611ad2565b600780546001600160a01b03908116600090815260016020908152604080832095909555925490911681526005909152205460ff161561278c576007546001600160a01b03166000908152600260205260409020546128309084611ad2565b6007546001600160a01b0316600090815260026020526040902055505050565b60095461285d9083611b8e565b600955600a5461286d9082611ad2565b600a55505056fe45524332303a207472616e7366657220746f20746865207a65726f2061646472657373416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f20616464726573735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e742e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725472616e7366657220616d6f756e74206d7573742062652067726561746572207468616e207a65726f45524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573734578636c75646564206164647265737365732063616e6e6f742063616c6c20746869732066756e6374696f6e45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c1c0587cc97654107700df0df7f1e52b4f5218d366aab90b9ea35fd4c4954a8c64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102135760003560e01c806352390c021161011857806395d89b41116100a0578063c49b9a801161006f578063c49b9a8014610771578063d543dbeb1461079d578063dd62ed3e146107c7578063ea2f0b3714610802578063f2fde38b146108355761021a565b806395d89b41146106c0578063a457c2d7146106d5578063a9059cbb1461070e578063af41063b146107475761021a565b8063715018a6116100e7578063715018a6146106245780637d1db4a51461063957806388f820201461064e5780638da5cb5b146106815780638ee88c53146106965761021a565b806352390c02146105765780635342acb4146105a95780636bc87c3a146105dc57806370a08231146105f15761021a565b80633685d4191161019b57806340f8007a1161016a57806340f8007a146104d2578063437823ec146104e75780634549b0391461051a57806349bd5a5e1461054c5780634a74bb02146105615761021a565b80633685d41914610427578063395093511461045a5780633b124fe7146104935780633bd5d173146104a85761021a565b80631694505e116101e25780631694505e1461034957806318160ddd1461037a57806323b872dd1461038f5780632d838119146103d2578063313ce567146103fc5761021a565b8063061c82d01461021f57806306fdde031461024b578063095ea7b3146102d557806313114a9d146103225761021a565b3661021a57005b600080fd5b34801561022b57600080fd5b506102496004803603602081101561024257600080fd5b5035610868565b005b34801561025757600080fd5b506102606108cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561029a578181015183820152602001610282565b50505050905090810190601f1680156102c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102e157600080fd5b5061030e600480360360408110156102f857600080fd5b506001600160a01b038135169060200135610965565b604080519115158252519081900360200190f35b34801561032e57600080fd5b50610337610983565b60408051918252519081900360200190f35b34801561035557600080fd5b5061035e610989565b604080516001600160a01b039092168252519081900360200190f35b34801561038657600080fd5b506103376109ad565b34801561039b57600080fd5b5061030e600480360360608110156103b257600080fd5b506001600160a01b038135811691602081013590911690604001356109b3565b3480156103de57600080fd5b50610337600480360360208110156103f557600080fd5b5035610a3a565b34801561040857600080fd5b50610411610a9c565b6040805160ff9092168252519081900360200190f35b34801561043357600080fd5b506102496004803603602081101561044a57600080fd5b50356001600160a01b0316610aa5565b34801561046657600080fd5b5061030e6004803603604081101561047d57600080fd5b506001600160a01b038135169060200135610c70565b34801561049f57600080fd5b50610337610cbe565b3480156104b457600080fd5b50610249600480360360208110156104cb57600080fd5b5035610cc4565b3480156104de57600080fd5b50610337610da0565b3480156104f357600080fd5b506102496004803603602081101561050a57600080fd5b50356001600160a01b0316610da6565b34801561052657600080fd5b506103376004803603604081101561053d57600080fd5b50803590602001351515610e2c565b34801561055857600080fd5b5061035e610ec0565b34801561056d57600080fd5b5061030e610ee4565b34801561058257600080fd5b506102496004803603602081101561059957600080fd5b50356001600160a01b0316610ef2565b3480156105b557600080fd5b5061030e600480360360208110156105cc57600080fd5b50356001600160a01b0316611082565b3480156105e857600080fd5b506103376110a0565b3480156105fd57600080fd5b506103376004803603602081101561061457600080fd5b50356001600160a01b03166110a6565b34801561063057600080fd5b50610249611108565b34801561064557600080fd5b506103376111b4565b34801561065a57600080fd5b5061030e6004803603602081101561067157600080fd5b50356001600160a01b03166111ba565b34801561068d57600080fd5b5061035e6111d8565b3480156106a257600080fd5b50610249600480360360208110156106b957600080fd5b50356111e7565b3480156106cc57600080fd5b5061026061124e565b3480156106e157600080fd5b5061030e600480360360408110156106f857600080fd5b506001600160a01b0381351690602001356112af565b34801561071a57600080fd5b5061030e6004803603604081101561073157600080fd5b506001600160a01b038135169060200135611317565b34801561075357600080fd5b506102496004803603602081101561076a57600080fd5b503561132b565b34801561077d57600080fd5b506102496004803603602081101561079457600080fd5b50351515611392565b3480156107a957600080fd5b50610249600480360360208110156107c057600080fd5b5035611443565b3480156107d357600080fd5b50610337600480360360408110156107ea57600080fd5b506001600160a01b03813581169160200135166114cb565b34801561080e57600080fd5b506102496004803603602081101561082557600080fd5b50356001600160a01b03166114f6565b34801561084157600080fd5b506102496004803603602081101561085857600080fd5b50356001600160a01b0316611579565b61087061167b565b6001600160a01b03166108816111d8565b6001600160a01b0316146108ca576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b600e55565b600b8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b5050505050905090565b600061097961097261167b565b848461167f565b5060015b92915050565b600a5490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60085490565b60006109c084848461176b565b610a30846109cc61167b565b610a2b85604051806060016040528060288152602001612953602891396001600160a01b038a16600090815260036020526040812090610a0a61167b565b6001600160a01b0316815260208101919091526040016000205491906119b1565b61167f565b5060019392505050565b6000600954821115610a7d5760405162461bcd60e51b815260040180806020018281038252602a815260200180612898602a913960400191505060405180910390fd5b6000610a87611a48565b9050610a938382611a6b565b9150505b919050565b600d5460ff1690565b610aad61167b565b6001600160a01b0316610abe6111d8565b6001600160a01b031614610b07576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526005602052604090205460ff16610b74576040805162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c726561647920696e636c756465640000000000604482015290519081900360640190fd5b60005b600654811015610c6c57816001600160a01b031660068281548110610b9857fe5b6000918252602090912001546001600160a01b03161415610c6457600680546000198101908110610bc557fe5b600091825260209091200154600680546001600160a01b039092169183908110610beb57fe5b600091825260208083209190910180546001600160a01b0319166001600160a01b039485161790559184168152600282526040808220829055600590925220805460ff191690556006805480610c3d57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055610c6c565b600101610b77565b5050565b6000610979610c7d61167b565b84610a2b8560036000610c8e61167b565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611ad2565b600e5481565b6000610cce61167b565b6001600160a01b03811660009081526005602052604090205490915060ff1615610d295760405162461bcd60e51b815260040180806020018281038252602c815260200180612a0d602c913960400191505060405180910390fd5b6000610d3483611b33565b5050506001600160a01b038616600090815260016020526040902054939450610d6293925084915050611b8e565b6001600160a01b038316600090815260016020526040902055600954610d889082611b8e565b600955600a54610d989084611ad2565b600a55505050565b60105481565b610dae61167b565b6001600160a01b0316610dbf6111d8565b6001600160a01b031614610e08576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600460205260409020805460ff19166001179055565b6000600854831115610e85576040805162461bcd60e51b815260206004820152601f60248201527f416d6f756e74206d757374206265206c657373207468616e20737570706c7900604482015290519081900360640190fd5b81610ea5576000610e9584611b33565b5094965061097d95505050505050565b6000610eb084611b33565b5093965061097d95505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b601454610100900460ff1681565b610efa61167b565b6001600160a01b0316610f0b6111d8565b6001600160a01b031614610f54576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526005602052604090205460ff1615610fc2576040805162461bcd60e51b815260206004820152601b60248201527f4163636f756e7420697320616c7265616479206578636c756465640000000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600160205260409020541561101c576001600160a01b03811660009081526001602052604090205461100290610a3a565b6001600160a01b0382166000908152600260205260409020555b6001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b6001600160a01b031660009081526004602052604090205460ff1690565b60125481565b6001600160a01b03811660009081526005602052604081205460ff16156110e657506001600160a01b038116600090815260026020526040902054610a97565b6001600160a01b03821660009081526001602052604090205461097d90610a3a565b61111061167b565b6001600160a01b03166111216111d8565b6001600160a01b03161461116a576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60155481565b6001600160a01b031660009081526005602052604090205460ff1690565b6000546001600160a01b031690565b6111ef61167b565b6001600160a01b03166112006111d8565b6001600160a01b031614611249576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b601255565b600c8054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561095b5780601f106109305761010080835404028352916020019161095b565b60006109796112bc61167b565b84610a2b85604051806060016040528060258152602001612a3960259139600360006112e661167b565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906119b1565b600061097961132461167b565b848461176b565b61133361167b565b6001600160a01b03166113446111d8565b6001600160a01b03161461138d576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b601055565b61139a61167b565b6001600160a01b03166113ab6111d8565b6001600160a01b0316146113f4576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b60148054821515610100810261ff00199092169190911790915560408051918252517f53726dfcaf90650aa7eb35524f4d3220f07413c8d6cb404cc8c18bf5591bc1599181900360200190a150565b61144b61167b565b6001600160a01b031661145c6111d8565b6001600160a01b0316146114a5576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6114c560646114bf83600854611beb90919063ffffffff16565b90611a6b565b60155550565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6114fe61167b565b6001600160a01b031661150f6111d8565b6001600160a01b031614611558576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600460205260409020805460ff19169055565b61158161167b565b6001600160a01b03166115926111d8565b6001600160a01b0316146115db576040805162461bcd60e51b8152602060048201819052602482015260008051602061297b833981519152604482015290519081900360640190fd5b6001600160a01b0381166116205760405162461bcd60e51b81526004018080602001828103825260268152602001806128c26026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b0383166116c45760405162461bcd60e51b81526004018080602001828103825260248152602001806129e96024913960400191505060405180910390fd5b6001600160a01b0382166117095760405162461bcd60e51b81526004018080602001828103825260228152602001806128e86022913960400191505060405180910390fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166117b05760405162461bcd60e51b81526004018080602001828103825260258152602001806129c46025913960400191505060405180910390fd5b6001600160a01b0382166117f55760405162461bcd60e51b81526004018080602001828103825260238152602001806128756023913960400191505060405180910390fd5b600081116118345760405162461bcd60e51b815260040180806020018281038252602981526020018061299b6029913960400191505060405180910390fd5b61183c6111d8565b6001600160a01b0316836001600160a01b03161415801561187657506118606111d8565b6001600160a01b0316826001600160a01b031614155b156118bc576015548111156118bc5760405162461bcd60e51b815260040180806020018281038252602881526020018061290a6028913960400191505060405180910390fd5b60006118c7306110a6565b905060155481106118d757506015545b601654811080159081906118ee575060145460ff16155b801561192c57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b031614155b801561193f5750601454610100900460ff165b1561195257601654915061195282611c44565b6001600160a01b03851660009081526004602052604090205460019060ff168061199457506001600160a01b03851660009081526004602052604090205460ff165b1561199d575060005b6119a986868684611ce1565b505050505050565b60008184841115611a405760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611a055781810151838201526020016119ed565b50505050905090810190601f168015611a325780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000806000611a55611e55565b9092509050611a648282611a6b565b9250505090565b6000808211611ac1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611aca57fe5b049392505050565b600082820183811015611b2c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000806000806000806000806000806000611b4d8c611fb8565b93509350935093506000806000611b6e8f878787611b69611a48565b61200d565b919f509d509b509599509397509195509350505050919395979092949650565b600082821115611be5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082611bfa5750600061097d565b82820282848281611c0757fe5b0414611b2c5760405162461bcd60e51b81526004018080602001828103825260218152602001806129326021913960400191505060405180910390fd5b6014805460ff191660011790556000611c5e826002611a6b565b90506000611c6c8383611b8e565b905047611c788361206f565b6000611c844783611b8e565b9050611c90838261227f565b604080518581526020810183905280820185905290517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a150506014805460ff19169055505050565b80611cee57611cee61237d565b6001600160a01b03841660009081526005602052604090205460ff168015611d2f57506001600160a01b03831660009081526005602052604090205460ff16155b15611d4457611d3f8484846123ba565b611e42565b6001600160a01b03841660009081526005602052604090205460ff16158015611d8557506001600160a01b03831660009081526005602052604090205460ff165b15611d9557611d3f8484846124fe565b6001600160a01b03841660009081526005602052604090205460ff16158015611dd757506001600160a01b03831660009081526005602052604090205460ff16155b15611de757611d3f8484846125bd565b6001600160a01b03841660009081526005602052604090205460ff168015611e2757506001600160a01b03831660009081526005602052604090205460ff165b15611e3757611d3f848484612617565b611e428484846125bd565b80611e4f57611e4f6126a0565b50505050565b6009546008546000918291825b600654811015611f8657826001600060068481548110611e7e57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020541180611ee35750816002600060068481548110611ebc57fe5b60009182526020808320909101546001600160a01b03168352820192909252604001902054115b15611efa5760095460085494509450505050611fb4565b611f3a6001600060068481548110611f0e57fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548490611b8e565b9250611f7c6002600060068481548110611f5057fe5b60009182526020808320909101546001600160a01b031683528201929092526040019020548390611b8e565b9150600101611e62565b50600854600954611f9691611a6b565b821015611fae57600954600854935093505050611fb4565b90925090505b9091565b6000806000806000611fc9866126b4565b90506000611fd6876126d0565b90506000611fe3886126ec565b90506000611ffd82611ff785818d89611b8e565b90611b8e565b9993985091965094509092505050565b600080808061201c8986611beb565b9050600061202a8987611beb565b905060006120388988611beb565b905060006120468989611beb565b9050600061205a82611ff785818989611b8e565b949d949c50929a509298505050505050505050565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061209e57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166373b295c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561211757600080fd5b505afa15801561212b573d6000803e3d6000fd5b505050506040513d602081101561214157600080fd5b505181518290600190811061215257fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061219d307f00000000000000000000000000000000000000000000000000000000000000008461167f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663762b15628360008430426040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561224257818101518382015260200161222a565b505050509050019650505050505050600060405180830381600087803b15801561226b57600080fd5b505af11580156119a9573d6000803e3d6000fd5b6122aa307f00000000000000000000000000000000000000000000000000000000000000008461167f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f91b3f728230856000806122e76111d8565b426040518863ffffffff1660e01b815260040180876001600160a01b03168152602001868152602001858152602001848152602001836001600160a01b0316815260200182815260200196505050505050506060604051808303818588803b15801561235257600080fd5b505af1158015612366573d6000803e3d6000fd5b50505050506040513d6060811015611e4f57600080fd5b600e5415801561238d5750601254155b15612397576123b8565b600e8054600f55601080546011556012805460135560009283905590829055555b565b60008060008060008060006123ce88611b33565b965096509650965096509650965061241488600260008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611b8e90919063ffffffff16565b6001600160a01b038b166000908152600260209081526040808320939093556001905220546124439088611b8e565b6001600160a01b03808c1660009081526001602052604080822093909355908b16815220546124729087611ad2565b6001600160a01b038a1660009081526001602052604090205561249482612708565b61249d81612791565b6124a78584612850565b886001600160a01b03168a6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a350505050505050505050565b600080600080600080600061251288611b33565b965096509650965096509650965061255887600160008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611b8e90919063ffffffff16565b6001600160a01b03808c16600090815260016020908152604080832094909455918c1681526002909152205461258e9085611ad2565b6001600160a01b038a166000908152600260209081526040808320939093556001905220546124729087611ad2565b60008060008060008060006125d188611b33565b965096509650965096509650965061244387600160008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611b8e90919063ffffffff16565b600080600080600080600061262b88611b33565b965096509650965096509650965061267188600260008d6001600160a01b03166001600160a01b0316815260200190815260200160002054611b8e90919063ffffffff16565b6001600160a01b038b166000908152600260209081526040808320939093556001905220546125589088611b8e565b600f54600e55601154601055601354601255565b600061097d60646114bf600e5485611beb90919063ffffffff16565b600061097d60646114bf60125485611beb90919063ffffffff16565b600061097d60646114bf60105485611beb90919063ffffffff16565b6000612712611a48565b905060006127208383611beb565b3060009081526001602052604090205490915061273d9082611ad2565b3060009081526001602090815260408083209390935560059052205460ff161561278c573060009081526002602052604090205461277b9084611ad2565b306000908152600260205260409020555b505050565b600061279b611a48565b905060006127a98383611beb565b6007546001600160a01b03166000908152600160205260409020549091506127d19082611ad2565b600780546001600160a01b03908116600090815260016020908152604080832095909555925490911681526005909152205460ff161561278c576007546001600160a01b03166000908152600260205260409020546128309084611ad2565b6007546001600160a01b0316600090815260026020526040902055505050565b60095461285d9083611b8e565b600955600a5461286d9082611ad2565b600a55505056fe45524332303a207472616e7366657220746f20746865207a65726f2061646472657373416d6f756e74206d757374206265206c657373207468616e20746f74616c207265666c656374696f6e734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f20616464726573735472616e7366657220616d6f756e74206578636565647320746865206d61785478416d6f756e742e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725472616e7366657220616d6f756e74206d7573742062652067726561746572207468616e207a65726f45524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f20616464726573734578636c75646564206164647265737365732063616e6e6f742063616c6c20746869732066756e6374696f6e45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220c1c0587cc97654107700df0df7f1e52b4f5218d366aab90b9ea35fd4c4954a8c64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by `account`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transfer(address,uint256)": {
        "details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 984,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4721,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_rOwned",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4725,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_tOwned",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4731,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4735,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_isExcludedFromFee",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4739,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_isExcluded",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4742,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_excluded",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4744,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_charityWalletAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4758,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_tTotal",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4767,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_rTotal",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4769,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_tFeeTotal",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4772,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_name",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 4775,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_symbol",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 4778,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_decimals",
        "offset": 0,
        "slot": "13",
        "type": "t_uint8"
      },
      {
        "astId": 4781,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_taxFee",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4784,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_previousTaxFee",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4787,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_charityFee",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 4790,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_previousCharityFee",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 4793,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_liquidityFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4796,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_previousLiquidityFee",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4802,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "inSwapAndLiquify",
        "offset": 0,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 4805,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "swapAndLiquifyEnabled",
        "offset": 1,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 4812,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "_maxTxAmount",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 4819,
        "contract": "contracts/THORSMEAD.sol:THORSMEAD",
        "label": "numTokensSellToAddToLiquidity",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}